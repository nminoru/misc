CREATE EXTENSION IF NOT EXISTS sample_fdw;
NOTICE:  extension "sample_fdw" already exists, skipping
CREATE SERVER loopback FOREIGN DATA WRAPPER sample_fdw;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback;
CREATE TABLE t1 (c1 int, c2 int);
CREATE TABLE t2 (c1 int, c2 int);
CREATE TABLE t3 (c1 int, c2 int);
INSERT INTO t1 (c1, c2) SELECT i, i % 2 FROM GENERATE_SERIES(1, 10) AS i;
INSERT INTO t2 (c1, c2) SELECT i, i % 3 FROM GENERATE_SERIES(1, 20) AS i;
INSERT INTO t3 (c1, c2) SELECT i, i % 4 FROM GENERATE_SERIES(1, 30) AS i;
CREATE FOREIGN TABLE ft1 (
       c1 int,
       c2 int
) SERVER loopback OPTIONS (table_name 'public.t1');
CREATE FOREIGN TABLE ft2 (
       c1 int,
       c2 int
) SERVER loopback OPTIONS (table_name 'public.t2');
ANALYZE;
-- Uncorrelated foreign table subquery from other one
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3 WHERE ft1.c1 = t3.c1 AND ft1.c2 <= (SELECT min(c2) FROM ft2);
                QUERY PLAN                
------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2
   Join Filter: (ft1.c1 = t3.c1)
   InitPlan 1 (returns $0)
     ->  Aggregate
           Output: min(ft2.c2)
           ->  Foreign Scan on public.ft2
                 Output: ft2.c2
                 FDW: sample_fdw
                 Remote Server: loopback
                 Remote Table: public.t2
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         Filter: (ft1.c2 <= $0)
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Seq Scan on public.t3
         Output: t3.c1, t3.c2
(19 rows)

-- Uncorrelated foreign table subquery from the same one
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3 WHERE ft1.c1 = t3.c1 AND ft1.c2 <= (SELECT min(c2) FROM ft1);
                   QUERY PLAN                   
------------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2
   Join Filter: (ft1.c1 = t3.c1)
   InitPlan 1 (returns $0)
     ->  Aggregate
           Output: min(ft1_1.c2)
           ->  Foreign Scan on public.ft1 ft1_1
                 Output: ft1_1.c2
                 FDW: sample_fdw
                 Remote Server: loopback
                 Remote Table: public.t1
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         Filter: (ft1.c2 <= $0)
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Seq Scan on public.t3
         Output: t3.c1, t3.c2
(19 rows)

-- Uncorrelated foreign table subquery from normal table
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3 WHERE ft1.c1 = t3.c1 AND t3.c2 <= (SELECT min(c2) FROM ft2);
                QUERY PLAN                
------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2
   Join Filter: (ft1.c1 = t3.c1)
   InitPlan 1 (returns $0)
     ->  Aggregate
           Output: min(ft2.c2)
           ->  Foreign Scan on public.ft2
                 Output: ft2.c2
                 FDW: sample_fdw
                 Remote Server: loopback
                 Remote Table: public.t2
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Seq Scan on public.t3
         Output: t3.c1, t3.c2
         Filter: (t3.c2 <= $0)
(19 rows)

-- Correlated foreign table subquery from other one
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3 WHERE ft1.c1 = t3.c1 AND t3.c2 <= (SELECT min(c2) FROM ft2 WHERE ft1.c1 = ft2.c1);
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2
   Join Filter: ((ft1.c1 = t3.c1) AND (t3.c2 <= (SubPlan 1)))
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Seq Scan on public.t3
         Output: t3.c1, t3.c2
   SubPlan 1
     ->  Aggregate
           Output: min(ft2.c2)
           ->  Foreign Scan on public.ft2
                 Output: ft2.c2
                 Filter: (ft1.c1 = ft2.c1)
                 FDW: sample_fdw
                 Remote Server: loopback
                 Remote Table: public.t2
(19 rows)

-- Correlated foreign table subquery from the same one
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3 WHERE ft1.c1 = t3.c1 AND t3.c2 <= (SELECT min(c2) FROM ft1 F1 WHERE ft1.c1 = F1.c1);
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2
   Join Filter: ((ft1.c1 = t3.c1) AND (t3.c2 <= (SubPlan 1)))
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Seq Scan on public.t3
         Output: t3.c1, t3.c2
   SubPlan 1
     ->  Aggregate
           Output: min(f1.c2)
           ->  Foreign Scan on public.ft1 f1
                 Output: f1.c2
                 Filter: (ft1.c1 = f1.c1)
                 FDW: sample_fdw
                 Remote Server: loopback
                 Remote Table: public.t1
(19 rows)

-- Correlated foreign table subquery from the same one using LATERAL 
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT * FROM ft1, t3, LATERAL (SELECT min(c2) AS c2_min FROM ft1 F1 WHERE ft1.c1 = F1.c1) ft2 WHERE ft1.c1 = t3.c1 AND t3.c2 <= ft2.c2_min;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Nested Loop
   Output: ft1.c1, ft1.c2, t3.c1, t3.c2, (min(f1.c2))
   ->  Foreign Scan on public.ft1
         Output: ft1.c1, ft1.c2
         FDW: sample_fdw
         Remote Server: loopback
         Remote Table: public.t1
   ->  Nested Loop
         Output: t3.c1, t3.c2, (min(f1.c2))
         Join Filter: ((ft1.c1 = t3.c1) AND (t3.c2 <= (min(f1.c2))))
         ->  Aggregate
               Output: min(f1.c2)
               ->  Foreign Scan on public.ft1 f1
                     Output: f1.c2
                     Filter: (ft1.c1 = f1.c1)
                     FDW: sample_fdw
                     Remote Server: loopback
                     Remote Table: public.t1
         ->  Seq Scan on public.t3
               Output: t3.c1, t3.c2
(20 rows)

DROP TABLE t1, t2, t3;
DROP FOREIGN TABLE ft1, ft2;
DROP USER MAPPING FOR CURRENT_USER SERVER loopback;
DROP SERVER loopback CASCADE;
